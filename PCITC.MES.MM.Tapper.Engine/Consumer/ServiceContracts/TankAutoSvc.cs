//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.0
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ITankAutoSvc")]
public interface ITankAutoSvc
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITankAutoSvc/MakeTankChk", ReplyAction="http://tempuri.org/ITankAutoSvc/MakeTankChkResponse")]
    bool MakeTankChk(int nodeId, System.DateTime timeStamp, string userId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITankAutoSvc/MakeTankChk", ReplyAction="http://tempuri.org/ITankAutoSvc/MakeTankChkResponse")]
    System.Threading.Tasks.Task<bool> MakeTankChkAsync(int nodeId, System.DateTime timeStamp, string userId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITankAutoSvc/MakeTankChks", ReplyAction="http://tempuri.org/ITankAutoSvc/MakeTankChksResponse")]
    bool MakeTankChks(int areaId, System.DateTime timeStamp, string userId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITankAutoSvc/MakeTankChks", ReplyAction="http://tempuri.org/ITankAutoSvc/MakeTankChksResponse")]
    System.Threading.Tasks.Task<bool> MakeTankChksAsync(int areaId, System.DateTime timeStamp, string userId);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITankAutoSvcChannel : ITankAutoSvc, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TankAutoSvcClient : System.ServiceModel.ClientBase<ITankAutoSvc>, ITankAutoSvc
{
    
    public TankAutoSvcClient()
    {
    }
    
    public TankAutoSvcClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TankAutoSvcClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TankAutoSvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TankAutoSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public bool MakeTankChk(int nodeId, System.DateTime timeStamp, string userId)
    {
        return base.Channel.MakeTankChk(nodeId, timeStamp, userId);
    }
    
    public System.Threading.Tasks.Task<bool> MakeTankChkAsync(int nodeId, System.DateTime timeStamp, string userId)
    {
        return base.Channel.MakeTankChkAsync(nodeId, timeStamp, userId);
    }
    
    public bool MakeTankChks(int areaId, System.DateTime timeStamp, string userId)
    {
        return base.Channel.MakeTankChks(areaId, timeStamp, userId);
    }
    
    public System.Threading.Tasks.Task<bool> MakeTankChksAsync(int areaId, System.DateTime timeStamp, string userId)
    {
        return base.Channel.MakeTankChksAsync(areaId, timeStamp, userId);
    }
}
