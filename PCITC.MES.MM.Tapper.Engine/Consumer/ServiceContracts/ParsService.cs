//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.0
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IParsService")]
public interface IParsService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParsService/Pars", ReplyAction="http://tempuri.org/IParsService/ParsResponse")]
    bool Pars(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParsService/Pars", ReplyAction="http://tempuri.org/IParsService/ParsResponse")]
    System.Threading.Tasks.Task<bool> ParsAsync(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParsService/CommitPars", ReplyAction="http://tempuri.org/IParsService/CommitParsResponse")]
    bool CommitPars(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParsService/CommitPars", ReplyAction="http://tempuri.org/IParsService/CommitParsResponse")]
    System.Threading.Tasks.Task<bool> CommitParsAsync(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParsService/UnCommitPars", ReplyAction="http://tempuri.org/IParsService/UnCommitParsResponse")]
    bool UnCommitPars(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IParsService/UnCommitPars", ReplyAction="http://tempuri.org/IParsService/UnCommitParsResponse")]
    System.Threading.Tasks.Task<bool> UnCommitParsAsync(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IParsServiceChannel : IParsService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ParsServiceClient : System.ServiceModel.ClientBase<IParsService>, IParsService
{
    
    public ParsServiceClient()
    {
    }
    
    public ParsServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ParsServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ParsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ParsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public bool Pars(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime)
    {
        return base.Channel.Pars(userId, fctrId, begShiftTime, endShiftTime);
    }
    
    public System.Threading.Tasks.Task<bool> ParsAsync(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime)
    {
        return base.Channel.ParsAsync(userId, fctrId, begShiftTime, endShiftTime);
    }
    
    public bool CommitPars(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime)
    {
        return base.Channel.CommitPars(userId, fctrId, begShiftTime, endShiftTime);
    }
    
    public System.Threading.Tasks.Task<bool> CommitParsAsync(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime)
    {
        return base.Channel.CommitParsAsync(userId, fctrId, begShiftTime, endShiftTime);
    }
    
    public bool UnCommitPars(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime)
    {
        return base.Channel.UnCommitPars(userId, fctrId, begShiftTime, endShiftTime);
    }
    
    public System.Threading.Tasks.Task<bool> UnCommitParsAsync(string userId, int fctrId, System.DateTime begShiftTime, System.DateTime endShiftTime)
    {
        return base.Channel.UnCommitParsAsync(userId, fctrId, begShiftTime, endShiftTime);
    }
}
