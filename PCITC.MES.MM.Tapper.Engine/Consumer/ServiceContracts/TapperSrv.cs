//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.0
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ITapperSrv")]
public interface ITapperSrv
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/InitUnitShift", ReplyAction="http://tempuri.org/ITapperSrv/InitUnitShiftResponse")]
    bool InitUnitShift(string userId, int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/InitUnitShift", ReplyAction="http://tempuri.org/ITapperSrv/InitUnitShiftResponse")]
    System.Threading.Tasks.Task<bool> InitUnitShiftAsync(string userId, int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/InstrumentSample", ReplyAction="http://tempuri.org/ITapperSrv/InstrumentSampleResponse")]
    bool InstrumentSample(int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/InstrumentSample", ReplyAction="http://tempuri.org/ITapperSrv/InstrumentSampleResponse")]
    System.Threading.Tasks.Task<bool> InstrumentSampleAsync(int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/SidelinesCaculate", ReplyAction="http://tempuri.org/ITapperSrv/SidelinesCaculateResponse")]
    bool SidelinesCaculate(int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/SidelinesCaculate", ReplyAction="http://tempuri.org/ITapperSrv/SidelinesCaculateResponse")]
    System.Threading.Tasks.Task<bool> SidelinesCaculateAsync(int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/ReviseByPreShiftRatio", ReplyAction="http://tempuri.org/ITapperSrv/ReviseByPreShiftRatioResponse")]
    bool ReviseByPreShiftRatio(int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/ReviseByPreShiftRatio", ReplyAction="http://tempuri.org/ITapperSrv/ReviseByPreShiftRatioResponse")]
    System.Threading.Tasks.Task<bool> ReviseByPreShiftRatioAsync(int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/ReviseBySolutionRatio", ReplyAction="http://tempuri.org/ITapperSrv/ReviseBySolutionRatioResponse")]
    bool ReviseBySolutionRatio(int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/ReviseBySolutionRatio", ReplyAction="http://tempuri.org/ITapperSrv/ReviseBySolutionRatioResponse")]
    System.Threading.Tasks.Task<bool> ReviseBySolutionRatioAsync(int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/CalculateIndex", ReplyAction="http://tempuri.org/ITapperSrv/CalculateIndexResponse")]
    bool CalculateIndex(int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/CalculateIndex", ReplyAction="http://tempuri.org/ITapperSrv/CalculateIndexResponse")]
    System.Threading.Tasks.Task<bool> CalculateIndexAsync(int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/SubmitUnit", ReplyAction="http://tempuri.org/ITapperSrv/SubmitUnitResponse")]
    bool SubmitUnit(string userId, int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/SubmitUnit", ReplyAction="http://tempuri.org/ITapperSrv/SubmitUnitResponse")]
    System.Threading.Tasks.Task<bool> SubmitUnitAsync(string userId, int unitId, System.DateTime begTime, System.DateTime endTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/HandleUnit", ReplyAction="http://tempuri.org/ITapperSrv/HandleUnitResponse")]
    bool HandleUnit(string userId, int unitId, System.DateTime begTime, System.DateTime endTime, int reviseMode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITapperSrv/HandleUnit", ReplyAction="http://tempuri.org/ITapperSrv/HandleUnitResponse")]
    System.Threading.Tasks.Task<bool> HandleUnitAsync(string userId, int unitId, System.DateTime begTime, System.DateTime endTime, int reviseMode);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITapperSrvChannel : ITapperSrv, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TapperSrvClient : System.ServiceModel.ClientBase<ITapperSrv>, ITapperSrv
{
    
    public TapperSrvClient()
    {
    }
    
    public TapperSrvClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TapperSrvClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TapperSrvClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TapperSrvClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public bool InitUnitShift(string userId, int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.InitUnitShift(userId, unitId, begTime, endTime);
    }
    
    public System.Threading.Tasks.Task<bool> InitUnitShiftAsync(string userId, int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.InitUnitShiftAsync(userId, unitId, begTime, endTime);
    }
    
    public bool InstrumentSample(int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.InstrumentSample(unitId, begTime, endTime);
    }
    
    public System.Threading.Tasks.Task<bool> InstrumentSampleAsync(int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.InstrumentSampleAsync(unitId, begTime, endTime);
    }
    
    public bool SidelinesCaculate(int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.SidelinesCaculate(unitId, begTime, endTime);
    }
    
    public System.Threading.Tasks.Task<bool> SidelinesCaculateAsync(int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.SidelinesCaculateAsync(unitId, begTime, endTime);
    }
    
    public bool ReviseByPreShiftRatio(int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.ReviseByPreShiftRatio(unitId, begTime, endTime);
    }
    
    public System.Threading.Tasks.Task<bool> ReviseByPreShiftRatioAsync(int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.ReviseByPreShiftRatioAsync(unitId, begTime, endTime);
    }
    
    public bool ReviseBySolutionRatio(int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.ReviseBySolutionRatio(unitId, begTime, endTime);
    }
    
    public System.Threading.Tasks.Task<bool> ReviseBySolutionRatioAsync(int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.ReviseBySolutionRatioAsync(unitId, begTime, endTime);
    }
    
    public bool CalculateIndex(int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.CalculateIndex(unitId, begTime, endTime);
    }
    
    public System.Threading.Tasks.Task<bool> CalculateIndexAsync(int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.CalculateIndexAsync(unitId, begTime, endTime);
    }
    
    public bool SubmitUnit(string userId, int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.SubmitUnit(userId, unitId, begTime, endTime);
    }
    
    public System.Threading.Tasks.Task<bool> SubmitUnitAsync(string userId, int unitId, System.DateTime begTime, System.DateTime endTime)
    {
        return base.Channel.SubmitUnitAsync(userId, unitId, begTime, endTime);
    }
    
    public bool HandleUnit(string userId, int unitId, System.DateTime begTime, System.DateTime endTime, int reviseMode)
    {
        return base.Channel.HandleUnit(userId, unitId, begTime, endTime, reviseMode);
    }
    
    public System.Threading.Tasks.Task<bool> HandleUnitAsync(string userId, int unitId, System.DateTime begTime, System.DateTime endTime, int reviseMode)
    {
        return base.Channel.HandleUnitAsync(userId, unitId, begTime, endTime, reviseMode);
    }
}
